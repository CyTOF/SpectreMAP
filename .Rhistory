make.multi.plot(dat = cell.dat,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
plot.by = c("Ly6C_asinh"),
divide.by = "Group",
add.density = TRUE)
make.multi.plot(dat = cell.dat,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
plot.by = c("Ly6C_asinh"),
divide.by = "Group")
make.colour.plot(dat = cell.dat,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "jet")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "spectral")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "viridis")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "inferno")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "magma")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
hex = TRUE)
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "jet")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "viridis")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "inferno")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "magma")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
hex = TRUE)
##########################################################################################################
#### Spectre - Simple Discovery Workflow
#### Clustering, dimensionality reduction, plotting, and summarise data
##########################################################################################################
# Spectre R package: https://sydneycytometry.org.au/spectre
# Thomas Myles Ashhurst, Felix Marsh-Wakefield, Givanna Putri
##########################################################################################################
#### 1. Load packages, and set working directory
##########################################################################################################
### Load libraries
library(Spectre)
Spectre::package.check()    # Check that all required packages are installed
Spectre::package.load()     # Load required packages
### Set PrimaryDirectory
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
PrimaryDirectory <- getwd()
### Set 'input' directory
setwd(PrimaryDirectory)
setwd("data/")
InputDirectory <- getwd()
setwd(PrimaryDirectory)
### Set 'metadata' directory
setwd(PrimaryDirectory)
setwd("metadata/")
MetaDirectory <- getwd()
setwd(PrimaryDirectory)
### Create output directory
dir.create("Output_Spectre", showWarnings = FALSE)
setwd("Output_Spectre")
OutputDirectory <- getwd()
setwd(PrimaryDirectory)
##########################################################################################################
#### 2. Import and prep data
##########################################################################################################
### Import data
setwd(InputDirectory)
list.files(InputDirectory, ".csv")
data.list <- Spectre::read.files(file.loc = InputDirectory,
file.type = ".csv",
do.embed.file.names = TRUE)
### Check the data
check <- do.list.summary(data.list)
check$name.table # Review column names and their subsequent values
check$ncol.check # Review number of columns (features, markers) in each sample
check$nrow.check # Review number of rows (cells) in each sample
data.list[[1]]
### Merge data
cell.dat <- Spectre::do.merge.files(dat = data.list)
cell.dat
### Arcsinh transformation
as.matrix(names(cell.dat))
to.asinh <- names(cell.dat)[c(1:9)]
to.asinh
cofactor <- 1000
plot.against <- "Ly6C_asinh"
cell.dat <- do.asinh(cell.dat, to.asinh, cofactor = 1000)
transformed.cols <- paste0(to.asinh, "_asinh")
setwd(OutputDirectory)
dir.create("Output - transformed plots")
setwd("Output - transformed plots")
for(i in transformed.cols){
make.colour.plot(do.subsample(cell.dat, 20000), i, plot.against)
}
##########################################################################################################
#### 3. Add metadata and set some preferences
##########################################################################################################
setwd(MetaDirectory)
### Metadata
meta.dat <- fread("sample.details.csv")
meta.dat
meta.dat <- meta.dat[,c(1:4)]
meta.dat
cell.dat <- do.add.cols(cell.dat, "FileName", meta.dat, "Filename", rmv.ext = TRUE)
cell.dat
### Columns
as.matrix(names(cell.dat))
cellular.cols <- names(cell.dat)[c(12:20)]
as.matrix(cellular.cols)
cluster.cols <- names(cell.dat)[c(12:20)]
as.matrix(cluster.cols)
exp.name <- "CNS experiment"
sample.col <- "Sample"
group.col <- "Group"
batch.col <- "Batch"
### Subsample targets per group
data.frame(table(cell.dat[[group.col]])) # Check number of cells per sample.
sub.targets <- c(2000, 20000) # target subsample numbers from each group
sub.targets
##########################################################################################################
#### 4. Clustering and dimensionality reduction
##########################################################################################################
setwd(OutputDirectory)
dir.create("Output - clustering")
setwd("Output - clustering")
### Clustering
cell.dat <- run.flowsom(cell.dat, cluster.cols)
fwrite(cell.dat, "clustered.data.csv")
### Dimensionality reduction
cell.sub <- do.subsample(cell.dat, sub.targets, group.col)
cell.sub <- run.umap(cell.sub, cluster.cols)
fwrite(cell.dat, "clustered.data.DR.csv")
### DR plots
make.colour.plot(cell.sub, "UMAP_X", "UMAP_Y", "FlowSOM_metacluster", col.type = 'factor', add.label = TRUE)
make.multi.plot(cell.sub, "UMAP_X", "UMAP_Y", cellular.cols)
make.multi.plot(cell.sub, "UMAP_X", "UMAP_Y", "FlowSOM_metacluster", group.col, col.type = 'factor')
### Expression heatmap
exp <- do.aggregate(cell.dat, cellular.cols, by = "FlowSOM_metacluster")
make.pheatmap(exp, "FlowSOM_metacluster", cellular.cols)
##########################################################################################################
#### 5. Annotate clusters
##########################################################################################################
setwd(OutputDirectory)
dir.create("Output - annotation")
setwd("Output - annotation")
### Annotate
annots <- list("Microglia" = c(2,4),
"Macrophages" = c(3),
"Neutrophils" = c(1),
"NK cells" = c(6),
"CD8 T cells" = c(5),
"CD4 T cells" = c(7)
)
annots <- do.list.switch(annots)
names(annots) <- c("Values", "Population")
setorderv(annots, 'Values')
annots
### Add annotations
cell.dat <- do.add.cols(cell.dat, "FlowSOM_metacluster", annots, "Values")
cell.dat
fwrite(cell.dat, "Annotated.data.csv")
cell.sub <- do.add.cols(cell.sub, "FlowSOM_metacluster", annots, "Values")
cell.sub
fwrite(cell.dat, "Annotated.data.DR.csv")
make.colour.plot(cell.sub, "UMAP_X", "UMAP_Y", "Population", col.type = 'factor', add.label = TRUE)
make.multi.plot(cell.sub, "UMAP_X", "UMAP_Y", "Population", group.col, col.type = 'factor')
##########################################################################################################
#### 6. Summary data
##########################################################################################################
setwd(OutputDirectory)
dir.create("Output - summary data")
setwd("Output - summary data")
### Create summary tables
write.sumtables(dat = cell.dat,
sample.col = sample.col,
pop.col = "Population",
measure.col = cellular.cols,
annot.col = c(group.col, batch.col),
group.col = group.col, do.proportions = TRUE,
do.mfi.per.sample = FALSE,
do.mfi.per.marker = TRUE)
### Autographs
files <- list.files(getwd(), ".csv")
as.matrix(files)
files <- files[c(7,10)]
files
init <- fread(files[[1]])
init
as.matrix(names(init))
plot.cols <- names(init)[c(6:11)]
plot.cols
for(i in c(1:length(files))){
nm <- files[[i]]
temp <- fread(files[[i]])
nm <- gsub(".csv", "", nm)
for(a in plot.cols){
make.autograph(temp,
x.axis = group.col,
y.axis = a,
y.axis.label = a,
title = a,
subtitle = gsub("SumTable-", "", nm),
filename = paste0(gsub("SumTable-", "", nm), " ", a, ".png"))
}
}
##########################################################################################################
#### 7. Output session info and FCS files
##########################################################################################################
### Session info and metadata
setwd(OutputDirectory)
dir.create("Output - info", showWarnings = FALSE)
setwd("Output - info")
sink(file = "session_info.txt", append=TRUE, split=FALSE, type = c("output", "message"))
session_info()
sink()
write(cellular.cols, "cellular.cols.txt")
write(cluster.cols, "cluster.cols.txt")
### Write FCS files
setwd(OutputDirectory)
dir.create("Output - FCS files", showWarnings = FALSE)
setwd("Output - FCS files")
write.files(cell.dat,
file.prefix = exp.name,
divide.by = sample.col,
write.csv = FALSE,
write.fcs = TRUE)
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y")
setwd("/Users/thomasa/Desktop/")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Group",
col.type = "factor")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Population",
col.type = 'factor',
add.label = TRUE)
make.multi.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
plot.by = c("Ly6C_asinh", "CD45_asinh", "Population"))
make.multi.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
plot.by = c("Ly6C_asinh", "CD45_asinh", "Population"),
add.density = TRUE)
make.multi.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
plot.by = c("Ly6C_asinh"),
divide.by = "Group")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "jet")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "viridis")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "inferno")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
hex = TRUE)
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "inferno")
make.colour.plot(dat = demo.clustered,
x.axis = "UMAP_X",
y.axis = "UMAP_Y",
col.axis = "Ly6C_asinh",
colours = "magma")
library(dplyr)
library(Seurat)
library(patchwork)
library(Spectre)
package.load()
pbmc.data <- Read10X(data.dir = "/Users/thomasa/Downloads/filtered_gene_bc_matrices/hg19/")
pbmc.data
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
### Exploration
pbmc$orig.ident
pbmc$nCount_RNA
pbmc$nFeature_RNA
nGenes <- pbmc@assays$RNA@counts@Dim[[1]]
nCells <- pbmc@assays$RNA@counts@Dim[[2]]
nObs <- length(pbmc@assays$RNA@counts@x)
nGenes * nCells
nObs / nGenes
### QC etc
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
#pbmc[["RNA"]]@data
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
############
# pbmc[["RNA"]]@scale.data
var.genes <- pbmc[["RNA"]]@var.features
var.genes
cell.dat
dim(cell.dat)
dim(cell.dat)
cellular.cols <- colnames(cell.dat)
length(cellular.cols)
cellular.cols[c(13710:length(cellular.cols))]
test.nms <- names(cell.dat)[c(1:100)]
pca_out <- stats::prcomp(cell.dat[,var.genes,with = FALSE],
scale = TRUE)
pcs <- colnames(pca_out$x)[c(1:30)]
pcs
pca_out <- stats::prcomp(cell.dat[,var.genes,with = FALSE],
scale = TRUE)
var.genes
cell.dat
cell.dat <- do.convert(dat = pbmc,
from = "Seurat",
seurat.assay = "RNA",
seurat.slot = "scale.data")
do.convert <- function(dat, # whatever dataset required (seurat object, flowFrame, etc)
from, # "Seurat", "flowFrame"
seurat.assay = "RNA",
seurat.slot = "scale.data",
to = "data.table"){ # data.table
### Setup
library(Spectre)
package.load()
### Seurat Objects
if(from == "Seurat"){
library(dplyr)
library(Seurat)
library(patchwork)
a <- GetAssayData(object = dat)
x <- GetAssayData(object = dat, assay = seurat.assay, slot = seurat.slot)
geneNames <- a@Dimnames[[1]]
cellNames <- a@Dimnames[[2]]
### Turn into data.table
if(to == "data.table"){
x.dt <- as.data.table(x)
rownames(x.dt) <- geneNames
colnames(x.dt)
x.dt.t <- data.table::transpose(x.dt)
rownames(x.dt.t) <- colnames(x.dt)
colnames(x.dt.t) <- rownames(x.dt)
res <- x.dt.t
}
}
### Return
return(res)
}
cell.dat <- do.convert(dat = pbmc,
from = "Seurat",
seurat.assay = "RNA",
seurat.slot = "scale.data")
dim(cell.dat)
#install.packages("factoextra")
### Prep
cellular.cols <- colnames(cell.dat)
length(cellular.cols)
cellular.cols[c(13710:length(cellular.cols))]
test.nms <- names(cell.dat)[c(1:100)]
###dat.fold[sapply(dat.fold, is.infinite)] <- NA
# pca_out <- stats::prcomp(x.dt.t[, test.nms,with = FALSE],
#                          scale = TRUE)
### PCA
pca_out <- stats::prcomp(cell.dat[,var.genes,with = FALSE],
scale = TRUE)
pcs <- colnames(pca_out$x)[c(1:30)]
pcs
cell.dat <- cbind(cell.dat,pca_out$x[,c(1:30)])
str(cell.dat)
names(cell.dat)[c(13710:length(names(cell.dat)))]
### FlowSOM + UMAP
cell.dat <- run.flowsom(dat = cell.dat, xdim = 5, ydim = 5, meta.k = 8, use.cols = pcs)
cell.dat <- run.umap(dat = cell.dat, use.cols = pcs)
setwd("/Users/ThomasA/Desktop/")
make.colour.plot(cell.dat, "UMAP_X", "UMAP_Y", "FlowSOM_metacluster", col.type = 'factor', add.label = TRUE)
make.colour.plot(cell.dat, "UMAP_X", "UMAP_Y", "FlowSOM_cluster", col.type = 'factor', add.label = TRUE)
make.colour.plot(cell.dat, "UMAP_X", "UMAP_Y")
cell.dat$CD3E
make.colour.plot(cell.dat, "UMAP_X", "UMAP_Y", "CD3E")
make.colour.plot(cell.dat, "UMAP_X", "UMAP_Y", "CD19")
make.colour.plot(cell.dat, "UMAP_X", "UMAP_Y", "CD14")
names(cell.dat)[c((length(names(cell.dat))-50):length(names(cell.dat)))]
to.plot <- c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"CD8A")
make.multi.plot(cell.dat, "UMAP_X", "UMAP_Y", to.plot, add.density = TRUE)
cell.dat
getwd("/Volumes/GoogleDrive/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
getwd("/Volumes/GoogleDrive/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
setwd("/Volumes/GoogleDrive/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
devtools::load_all()
devtools::document()
library(devtools)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
devtools::load_all()
devtools::document()
library(devtools)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
devtools::load_all()
devtools::document()
library(devtools)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
devtools::load_all()
devtools::document()
library(devtools)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
devtools::load_all()
devtools::document()
load("/Volumes/GoogleDrive/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/data/demo.spatial.RData")
load("/Volumes/GoogleDrive/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/data/demo.spatial.RData")
library(devtools)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
devtools::load_all()
devtools::document()
library(devtools)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
devtools::load_all()
devtools::document()
library('devtools')
install_github("sydneycytometry/spectremap")
library(devtools)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
devtools::load_all()
devtools::document()
