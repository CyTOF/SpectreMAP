# scale = FALSE,
# plot.ind.label = c("point", "text"),
# row.names = patient.id,
plot.ind.group = TRUE,
group.ind = group.col,
repel = FALSE)
setwd(OutputDirectory)
# dir.create("Without 482-W032 -- all features")
# setwd("Without 482-W032 -- all features")
# OutputDirectory <- getwd()
#
# unique(sum.dat$Sample)
# nrow(sum.dat)
#
# sum.dat <- sum.dat[sum.dat[["Sample"]] != 'COVID_482-W032_V1',]
# sum.dat <- sum.dat[sum.dat[["Sample"]] != 'COVID_482-W032_V2',]
# sum.dat <- sum.dat[sum.dat[["Sample"]] != 'COVID_482-W032_V3',]
# sum.dat <- sum.dat[sum.dat[["Sample"]] != 'COVID_482-W032_V4',]
#
# # sum.dat <- sum.dat[sum.dat[["Sample"]] != 'COVID_AH0088_D30+',]
# # sum.dat <- sum.dat[sum.dat[["Sample"]] != 'COVID_AH0088_V1',]
# # sum.dat <- sum.dat[sum.dat[["Sample"]] != 'COVID_AH0088_V2',]
# # sum.dat <- sum.dat[sum.dat[["Sample"]] != 'COVID_AH0088_V3',]
#
# nrow(sum.dat)
setwd(OutputDirectory)
dir.create("Output - summary data tables (with stats)")
setwd("Output - summary data tables (with stats)")
### Z score
## Remove columns with NA
as.matrix(plot.cols)
plot.cols <- plot.cols[c(1:140)]
zscore <- function(x) {
z <- (x - mean(x)) / sd(x)
return(z)
}
sum.dat.z <- sum.dat
res <- scale(sum.dat.z[,plot.cols, with = FALSE])
res <- as.data.table(res)
sum.dat.z[,plot.cols] <- res
sum.dat.z
fwrite(sum.dat, "Summary data.csv")
fwrite(sum.dat.z, "Summary data - z-score.csv")
### Statistical tests
sum.dat.stats.raw <- do.stats(dat = sum.dat,
use.cols = plot.cols,
sample.col = sample.col,
grp.col = group.col,
comparisons = comparisons,
corrections = NULL,
variance.test = variance.test,
pairwise.test = pairwise.test)
sum.dat.stats.FDR <- do.stats(sum.dat,
use.cols = plot.cols,
sample.col = sample.col,
grp.col = group.col,
comparisons = comparisons,
corrections = 'fdr',
variance.test = variance.test,
pairwise.test = pairwise.test)
sum.dat.stats.raw
sum.dat.stats.FDR
sum.dat.stats.raw[,c(1:3)]
sum.dat.stats.FDR[,c(1:3)]
fwrite(sum.dat.stats.raw, "Summary data - stats -  uncorrected.csv")
fwrite(sum.dat.stats.FDR, "Summary data - stats - FDR.csv")
### Sig tables
## Raw p-values
raw <- sum.dat.stats.raw[sum.dat.stats.raw[["Type"]] == 'p-value',]
raw <- raw[raw[["Comparison"]] != 'Kruskal',]
pval.compars <- raw[["Comparison"]]
pval <- raw[,plot.cols, with = FALSE]
pval.sig <- matrix(nrow = 0, ncol = length(plot.cols))
for(i in c(1:nrow(pval))){
temp <- pval[i,]
temp <- temp < 0.05
temp <- gsub(TRUE, "Significant", temp)
temp <- gsub(FALSE, "NS", temp)
pval.sig <- rbind(pval.sig, temp)
}
pval.sig <- as.data.frame(pval.sig)
names(pval.sig) <- plot.cols
rownames(pval.sig) <- paste0("p-value - ", pval.compars)
p.val.annots <- list()
for(i in rownames(pval.sig)){
p.val.annots[[i]]  <- c('NS' = "Black", "Significant" = "Blue")
}
## P-values FDR
fdr <- sum.dat.stats.FDR[sum.dat.stats.FDR[["Type"]] == 'p-value_fdr',]
fdr <- fdr[fdr[["Comparison"]] != 'Kruskal',]
pval.fdr.compars <- fdr[["Comparison"]]
pval.fdr <- fdr[,plot.cols, with = FALSE]
pval.fdr.sig <- matrix(nrow = 0, ncol = length(plot.cols))
for(i in c(1:nrow(pval.fdr))){
temp <- pval.fdr[i,]
temp <- temp < 0.05
temp <- gsub(TRUE, "Significant", temp)
temp <- gsub(FALSE, "NS", temp)
pval.fdr.sig <- rbind(pval.fdr.sig, temp)
}
pval.fdr.sig <- as.data.frame(pval.fdr.sig)
names(pval.fdr.sig) <- plot.cols
rownames(pval.fdr.sig) <- paste0("p-value_fdr - ", pval.fdr.compars)
p.val.fdr.annots <- list()
for(i in rownames(pval.fdr.sig)){
p.val.fdr.annots[[i]]  <- c('NS' = "Black", "Significant" = "Red")
}
## Create annotation data.frame
x <- rbind(pval.sig, pval.fdr.sig)
# x <- data.frame("p_value" = pval,
#                 "p_value_FDR" = pval.fdr)
x <- t(x)
x <- as.data.frame(x)
# x <- as.matrix(x)
# feature.annots <- as.data.frame(x)
# rownames(feature.annots) <- plot.cols
# feature.annots
#str(feature.annots)
#str(my_sample_col)
str(x)
feature.annots <- x
p.val.annots
p.val.fdr.annots
annotation_colors <- c(p.val.annots, p.val.fdr.annots)
# annotation_colors <- list('p_value' = c('NS' = "Black", "Significant" = "Blue"),
#                           'p_value_FDR' = c('NS' = "Black", "Significant" = "Red"))
##########################################################################################################
#### Differential heatmap
##########################################################################################################
setwd(OutputDirectory)
dir.create("Output - heatmaps with stats")
setwd("Output - heatmaps with stats")
sum.dat.z[[group.col]]
make.pheatmap(sum.dat.z,
sample.col = sample.col,
plot.cols = plot.cols,
annot.cols = annot.cols,
feature.annots = feature.annots,
annotation_colors = annotation_colors,
is.fold = TRUE,
fold.range = c(3, -3),
dendrograms = 'column',
row.sep = c(55,108),
#cutree_rows = 2,
cutree_cols = 8,
plot.title = "All features - z-score (static rows)",
file.name = "All features - z-score (static rows).png")
make.pheatmap(sum.dat.z,
sample.col = sample.col,
plot.cols = plot.cols,
annot.cols = annot.cols,
feature.annots = feature.annots,
annotation_colors = annotation_colors,
is.fold = TRUE,
fold.range = c(3, -3),
cutree_rows = 2,
cutree_cols = 8,
plot.title = "All features - z-score",
file.name = "All features - z-score.png")
##########################################################################################################
#### Volcano plots
##########################################################################################################
setwd(OutputDirectory)
dir.create("Output - volcano plots")
setwd("Output - volcano plots")
### Setup
comps <- list()
for(i in c(1:length(comparisons))){
temp <- comparisons[[i]]
strg <- paste0(temp[[1]], " to ", temp[[2]])
comps[[i]] <- strg
}
comps
### Uncorrected volcanos
setwd(OutputDirectory)
dir.create("Output - volcano plots")
setwd("Output - volcano plots")
dir.create("Uncorrected p-values")
setwd("Uncorrected p-values")
for(i in comps){
temp <- sum.dat.stats.raw[sum.dat.stats.raw[["Comparison"]] == i,]
p.dat <- temp[temp[["Type"]] == "p-value",]
p.dat <- p.dat[,names(p.dat)[c(3:length(names(p.dat)))], with = FALSE]
fc.dat <- temp[temp[["Type"]] == "FClog2",]
fc.dat <- fc.dat[,names(fc.dat)[c(3:length(names(fc.dat)))], with = FALSE]
nms <- names(fc.dat)
make.volcano.plot(dat.p = p.dat,
dat.fc = fc.dat,
vars = nms,
title = i,
xlim = c(-3.5, 3.5))
}
### Corrected
setwd(OutputDirectory)
dir.create("Output - volcano plots")
setwd("Output - volcano plots")
dir.create("Corrected p-values")
setwd("Corrected p-values")
for(i in comps){
temp <- sum.dat.stats.FDR[sum.dat.stats.FDR[["Comparison"]] == i,]
p.dat <- temp[temp[["Type"]] == "p-value_fdr",]
p.dat <- p.dat[,names(p.dat)[c(3:length(names(p.dat)))], with = FALSE]
fc.dat <- temp[temp[["Type"]] == "FClog2",]
fc.dat <- fc.dat[,names(fc.dat)[c(3:length(names(fc.dat)))], with = FALSE]
nms <- names(fc.dat)
make.volcano.plot(dat.p = p.dat,
dat.fc = fc.dat,
vars = nms,
title = i,
xlim = c(-3.5, 3.5))
}
##########################################################################################################
#### Output
##########################################################################################################
setwd(OutputDirectory)
dir.create("Output - data  or stats")
setwd("Output - data for stats")
fwrite(sum.dat, "sum.dat.csv")
fwrite(as.data.table(plot.cols), "plot.cols.csv", col.names = FALSE)
temp <- spatial.dat$`20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac`$MASKS$cell_mask$maskraster
### Install SpectreMAP
library('devtools')
install_github("tomashhurst/SpectreMAP")
### Load packages
library(Spectre)
package.check()
package.load()
library(SpectreMAP)
install_github("hunzikp/velox")
library('velox')
### Set directories
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
start.dir <- getwd()
start.dir
dir.create("SpectreMAP_output")
setwd("SpectreMAP_output")
output.dir <- getwd()
###################################################################################
### Read in images and masks
###################################################################################
### Read TIFF files into spatial.dat object
setwd(start.dir)
setwd("ROIs/")
rois <- list.dirs(getwd(), full.names = FALSE, recursive = FALSE)
rois
spatial.dat <- read.spatial.files(roi.loc = getwd(), rois = rois)
### Check names of channels
as.matrix(names(spatial.dat)) # ROI names
names(spatial.dat[[1]]) # only rasters  currently in the data
as.matrix(names(spatial.dat[[1]]$RASTERS)) # TIFF names of first ROI
### Read in masks
setwd(start.dir)
setwd("Masks")
list.files()
mask.ext <- "_ilastik_s2_Probabilities_mask.tiff"
masks <- list.files(pattern = mask.ext)
masks
spatial.dat <- do.add.masks(spatial.dat = spatial.dat,
mask.loc = getwd(),
masks = masks,
mask.ext = mask.ext,
mask.label = "cell_mask")
names(spatial.dat[[1]])
spatial.dat[[1]]$RASTERS
spatial.dat[[1]]$MASKS
raster::rasterToPoints(spatial.dat[[1]]$RASTERS$X127I_I127)
library(sf)
library(stars)
raster::raster(spatial.dat[[1]]$RASTERS$X127I_I127)
temp <- spatial.dat$`20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac`$MASKS$cell_mask$maskraster
temp@data
temp
length(unique(values(temp)))
### Install SpectreMAP
library('devtools')
install_github("tomashhurst/SpectreMAP")
### Load packages
library(Spectre)
package.check()
package.load()
library(SpectreMAP)
install_github("hunzikp/velox")
library('velox')
### Set directories
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
start.dir <- getwd()
start.dir
dir.create("SpectreMAP_output")
setwd("SpectreMAP_output")
output.dir <- getwd()
###################################################################################
### Read in images and masks
###################################################################################
### Read TIFF files into spatial.dat object
setwd(start.dir)
setwd("ROIs/")
rois <- list.dirs(getwd(), full.names = FALSE, recursive = FALSE)
rois
spatial.dat <- read.spatial.files(roi.loc = getwd(), rois = rois)
### Check names of channels
as.matrix(names(spatial.dat)) # ROI names
names(spatial.dat[[1]]) # only rasters  currently in the data
as.matrix(names(spatial.dat[[1]]$RASTERS)) # TIFF names of first ROI
### Read in masks
setwd(start.dir)
setwd("Masks")
list.files()
mask.ext <- "_ilastik_s2_Probabilities_mask.tiff"
masks <- list.files(pattern = mask.ext)
masks
spatial.dat <- do.add.masks(spatial.dat = spatial.dat,
mask.loc = getwd(),
masks = masks,
mask.ext = mask.ext,
mask.label = "cell_mask")
names(spatial.dat[[1]])
spatial.dat[[1]]$RASTERS
spatial.dat[[1]]$MASKS
raster::rasterToPoints(spatial.dat[[1]]$RASTERS$X127I_I127)
library(sf)
library(stars)
spatial.dat
temp <- spatial.dat$`20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac`$MASKS$cell_mask$maskraster
temp@data
temp
length(unique(values(temp)))
values(temp)
temp
extent(temp) # X (columns) = 500, Y (rows) = 501
library(raster)
length(unique(values(temp)))
?extent
extent(temp) # X (columns) = 500, Y (rows) = 501
length(values(temp))
# x <- unique(temp@extent[1]:temp@extent[2])
# y <- unique(temp@extent[3]:temp@extent[4])
#
x <- c(temp@extent[1]+1:temp@extent[2])
y <- c(temp@extent[3]+1:temp@extent[4])
x
maxX <- temp@extent[2]
maxY <- temp@extent[4]
maxX
maxY
c(0.5:499.5)
x
maxX
c(0.5:500.5)
x <- c(temp@extent[1]+1:temp@extent[2])
y <- c(temp@extent[3]+1:temp@extent[4])
x
y
## Install devtools (if not already installed)
if(!require('devtools')) {install.packages('devtools')}
### Install Spectre and SpectreMAP
library('devtools')
install_github("sydneycytometry/spectre")
### Install additional packages
## Install BiocManager to download packages from Bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
## Download additional BioConductor packages
if(!require('flowCore')) {BiocManager::install('flowCore')}
if(!require('Biobase')) {BiocManager::install('Biobase')}
if(!require('flowViz')) {BiocManager::install('flowViz')}
if(!require('FlowSOM')) {BiocManager::install('FlowSOM')}
## Velox for fast extraction
install_github("hunzikp/velox")
### Load packages
library(Spectre)
library(SpectreMAP)
package.check()
package.load()
library('velox')
library(raster)
### Set directories
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
start.dir <- getwd()
start.dir
dir.create("SpectreMAP_output")
setwd("SpectreMAP_output")
output.dir <- getwd()
###################################################################################
### Setup
###################################################################################
## Install devtools (if not already installed)
if(!require('devtools')) {install.packages('devtools')}
### Install Spectre and SpectreMAP
library('devtools')
install_github("sydneycytometry/spectre")
install_github("tomashhurst/SpectreMAP")
### Install additional packages
## Install BiocManager to download packages from Bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
## Download additional BioConductor packages
if(!require('flowCore')) {BiocManager::install('flowCore')}
if(!require('Biobase')) {BiocManager::install('Biobase')}
if(!require('flowViz')) {BiocManager::install('flowViz')}
if(!require('FlowSOM')) {BiocManager::install('FlowSOM')}
## Velox for fast extraction
install_github("hunzikp/velox")
### Load packages
library(Spectre)
library(SpectreMAP)
package.check()
package.load()
library('velox')
library(raster)
### Set directories
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
start.dir <- getwd()
start.dir
dir.create("SpectreMAP_output")
setwd("SpectreMAP_output")
output.dir <- getwd()
###################################################################################
### Read in images and masks
###################################################################################
### Read TIFF files into spatial.dat object
setwd(start.dir)
setwd("ROIs/")
rois <- list.dirs(getwd(), full.names = FALSE, recursive = FALSE)
rois
spatial.dat <- read.spatial.files(roi.loc = getwd(), rois = rois)
### Check names of channels
as.matrix(names(spatial.dat)) # ROI names
names(spatial.dat[[1]]) # only rasters  currently in the data
as.matrix(names(spatial.dat[[1]]$RASTERS)) # TIFF names of first ROI
### Read in masks
setwd(start.dir)
setwd("Masks")
list.files()
mask.ext <- "_ilastik_s2_Probabilities_mask.tiff"
masks <- list.files(pattern = mask.ext)
masks
spatial.dat <- do.add.masks(spatial.dat = spatial.dat,
mask.loc = getwd(),
masks = masks,
mask.ext = mask.ext,
mask.label = "cell_mask")
names(spatial.dat[[1]])
spatial.dat[[1]]$RASTERS
spatial.dat[[1]]$MASKS
### Create cell outlines
spatial.dat <- do.create.outlines(spatial.dat = spatial.dat, mask.name = "cell_mask")
as.matrix(names(spatial.dat[[1]]))
as.matrix(names(spatial.dat[[1]]$MASKS$cell_mask))
str(spatial.dat, 3)
spatial.dat[[1]]$MASKS$cell_mask$polygons
spatial.dat[[1]]$MASKS$cell_mask$outlines
### Summarise 'per cell' data
spatial.dat <- do.extract(dat = spatial.dat, mask = "cell_mask", name = "CellData", fun = "mean")
###################################################################################
### Make some spatial plots
###################################################################################
setwd(output.dir)
dir.create("Plots")
setwd("Plots")
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask",
cell.dat = "CellData",
cell.col = "CD20_Dy161")
###################################################################################
### Create 'cellular' data and plot
###################################################################################
setwd(output.dir)
dir.create("Plots")
setwd("Plots")
### Extract 'cellular' data from each ROI and combine into a single data.table
cell.dat <- do.extract.cell.dat(spatial.dat, 'CellData')
cell.dat
as.matrix(names(cell.dat))
cell.dat <- do.asinh(cell.dat, names(cell.dat)[c(3:27)], cofactor = 1)
cell.dat
make.colour.plot(cell.dat, "CD20_Dy161_asinh", "CD3_Er170_asinh")
make.spatial.plot(spatial.dat = spatial.dat,
image.roi = '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',
image.channel = "CD20_Dy161",
mask.outlines = "cell_mask",
cell.dat = cell.dat[cell.dat[['ROI']] == '20171228_spleen315_500x500_editedforFAS_s1_p9_r2_a2_ac',],
cell.col = "CD20_Dy161_asinh")
###################################################################################
### Save spatial.data file
###################################################################################
### Set working dir
setwd(output.dir)
saveRDS(spatial.dat, 'spatial.dat.rds')
fwrite(cell.dat, "cell.dat.csv")
cell.dat <- do.extract.cell.dat(spatial.dat, 'CellData')
setwd(output.dir)
dir.create("Plots")
setwd("Plots")
spatial.dat <- do.extract(dat = spatial.dat, mask = "cell_mask", name = "CellData", fun = "mean")
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
document()
detach("package:SpectreMAP", unload = TRUE)
library(roxygen2)
setwd("/Users/thomasa/Google Drive File Stream/My Drive/_Sydney Cytometry/Libraries (synced)/GitHub/Public github/SpectreMAP/")
document()
library(SpectreMAP)
