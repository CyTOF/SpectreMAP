# as.matrix(names(x))
# sample.col <- "Sample"
# group.col <- "Group"
# ctrl.grp <- "Mock"
# convert.cols <- names(x)[c(6:20)]
# log2 = TRUE
###
#x <- dat
x <- as.data.table(x)
#annot <- x[,!convert.cols, with = FALSE]
annot <- x[, setdiff(names(x), convert.cols), with = FALSE]
temp <- x[,convert.cols, with = FALSE]
# annot <- x[-c(convert.cols)]
# temp <- x[c(convert.cols)]
ctrl.dat <- x[x[[group.col]] == ctrl.grp,]
#ctrl.grp <- subset(x, x[group.col] == ctrl.grp)
#ctrl.grp <- ctrl.grp[,unlist(lapply(ctrl.grp, is.numeric))]
ctrl.grp.means <- colMeans(ctrl.dat[,convert.cols, with = FALSE])
as.matrix(ctrl.grp.means)
fold.raw <- t(t(temp) / ctrl.grp.means)
fold.raw
if(log2 == TRUE){
fold <- log(x = fold.raw, 2)
}
if(log2 == FALSE){
fold <- fold.raw
}
fold <- as.data.table(fold)
res <- cbind(annot, fold)
# x[,convert.cols, with = FALSE] <- fold
# x[c(convert.cols)] <- fold
# x
return(res)
}
## Convert to fold
dat.fold <- do.convert.to.fold(x = dat,
sample.col = sample.col,
group.col = group.col,
ctrl.grp = ctrl.grp,
convert.cols = plot.names) ########
remove.packages("Spectre")
## Install Spectre (development version)
library('devtools')
install_github("sydneycytometry/spectre", ref = "development")
library(Spectre)
package.load()
##########################################################################################################
#### Spectre -- Cluster Annotation
##########################################################################################################
# Spectre R package: https://sydneycytometry.org.au/spectre
# Thomas Myles Ashhurst, Felix Marsh-Wakefield, Givanna Putri
##########################################################################################################
#### SETUP
##########################################################################################################
### Load packages from library
library(Spectre)
Spectre::package.check() # --> change so that message at the end is "All required packages have been successfully installed"
Spectre::package.load() # --> change so that message at the end is "All required packages have been successfully loaded"
session_info()
### Set working directory
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
### Determine input directory
InputDirectory <- PrimaryDirectory
InputDirectory
### Set metadata directory
setwd(PrimaryDirectory)
setwd("metadata/")
MetadataDirectory <- getwd()
### Create output directory
setwd(PrimaryDirectory)
dir.create("Output_Annotated")
setwd("Output_Annotated")
OutputDirectory <- getwd()
OutputDirectory
setwd(PrimaryDirectory)
##########################################################################################################
#### LOAD DATA
##########################################################################################################
### Read data into R
setwd(InputDirectory)
list.files(path = getwd(), pattern = ".csv")
cell.dat <- fread("Clustered_TAdemo.csv")
cell.dat
cell.dat.sub <-fread("DimRed_TAdemo.csv")
cell.dat.sub
### Read in metedata
setwd(MetadataDirectory)
list.files(getwd(), ".csv")
annotations <- fread("annotation.csv")
annotations
### Define existing column name for clusters
as.matrix(names(cell.dat))
sample.col <- "Sample"
group.col <- "Group"
to.measure <- names(cell.dat)[c(2,4:6,8:9,11:13,16:19,21:30,32)]
to.annotate <- c(sample.col, group.col)
as.matrix(names(cell.dat.sub))
Xdim.name <- "UMAP_X"
Ydim.name <- "UMAP_Y"
cluster.name <- "FlowSOM_metacluster"
### Create a name for NEW column for populations
population.name <- "Population"
##########################################################################################################
#### ADD ANNOTATIONS
##########################################################################################################
### Embed population name columns in cell.dat
cell.dat <- Spectre::do.embed.columns(x = cell.dat,
type = "data.table",
base.name = cluster.name,
col.name = population.name,
match.to = as.vector(annotations[,1]),
new.cols = as.vector(annotations[,2]))
cell.dat
### Embed population name columns in cell.dat.sub
cell.dat.sub <- Spectre::do.embed.columns(x = cell.dat.sub,
type = "data.table",
base.name = cluster.name,
col.name = population.name,
match.to = as.vector(annotations[,1]),
new.cols = as.vector(annotations[,2]))
cell.dat.sub
##########################################################################################################
#### GENERATE SOME NEW DATA (based on population names)
##########################################################################################################
### Directories
setwd(OutputDirectory)
dir.create("Output-annotated-data", showWarnings = FALSE)
setwd("Output-annotated-data")
### Write 'large' dataset
Spectre::write.files(dat = cell.dat,
file.prefix= paste0("Clustered_annotated"), # required
write.csv = TRUE,
write.fcs = TRUE)
Spectre::write.files(dat = cell.dat,
file.prefix= paste0("Clustered_annotated"), # required
divide.by = sample.col,
write.csv = FALSE,
write.fcs = TRUE)
### Write 'subsample' dataset
Spectre::write.files(dat = cell.dat.sub,
file.prefix = paste0("DimRed_annotated"), # required
write.csv = TRUE,
write.fcs = TRUE)
Spectre::write.files(dat = cell.dat.sub,
file.prefix = paste0("DimRed_annotated"), # required
divide.by = sample.col,
write.csv = FALSE,
write.fcs = TRUE)
##########################################################################################################
#### Some extra plots
##########################################################################################################
### Make plots
setwd(OutputDirectory)
dir.create("Output-annotated-plots", showWarnings = FALSE)
setwd("Output-annotated-plots")
as.matrix(names(cell.dat.sub))
### All data
make.factor.plot(dat = cell.dat.sub,
x.axis = Xdim.name,
y.axis = Ydim.name,
col.axis = population.name,
add.label = TRUE)
### Group multi plots
make.multi.plot(dat = cell.dat.sub,
x.axis = Xdim.name,
y.axis = Ydim.name,
col.axis = population.name,
type = "factor",
plot.by = group.col,
align.xy.by = cell.dat.sub,
align.col.by = cell.dat.sub)
##########################################################################################################
#### Make an expression heatmap
##########################################################################################################
### Summary data (cluster x marker)
Spectre::write.sumtables(x = cell.dat,
sample.col = sample.col,
pop.col = population.name,
measure.col = to.measure,
annot.col = to.annotate,
group.col = group.col,
do.frequencies = FALSE,
cell.counts = NULL,
do.mfi.per.sample = TRUE, ###
do.mfi.per.marker = FALSE)
### Make an expression pheatmap
setwd(OutputDirectory)
setwd("Output-annotated-plots/SumTable-MFI-PerSample/")
list.files(getwd(), ".csv")
to.pheatmap <- read.csv("SumTable-MFI-AllSamples.csv")
to.pheatmap
### Save pheatmap
setwd(OutputDirectory)
setwd("Output-annotated-plots")
make.pheatmap(dat = to.pheatmap,
file.name = "Expression by population.png",
plot.title = "Expression by population",
plot.cols = to.measure,
sample.col = population.name)
##########################################################################################################
#### Spectre -- SumTables, Heatmaphs, Graphs
##########################################################################################################
# Spectre R package: https://sydneycytometry.org.au/spectre
# Thomas Myles Ashhurst, Felix Marsh-Wakefield, Givanna Putri
##########################################################################################################
#### SETUP
##########################################################################################################
### Load packages from library
library(Spectre)
Spectre::package.check() # --> change so that message at the end is "All required packages have been successfully installed"
Spectre::package.load() # --> change so that message at the end is "All required packages have been successfully loaded"
session_info()
if(!require('pheatmap')) {install.packages('pheatmap')}
if(!require('ggpubr')) {install.packages('ggpubr')}
library(pheatmap)
library(ggpubr)
### Set working directory
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
PrimaryDirectory <- getwd()
PrimaryDirectory
### Determine data input directory
InputDirectory <- PrimaryDirectory
### Create an output directory
setwd(PrimaryDirectory)
dir.create("Output-sumtables")
setwd("Output-sumtables")
OutputDirectory <- getwd()
##########################################################################################################
#### LOAD DATA
##########################################################################################################
### Read data into R
setwd(InputDirectory)
list.files(path = getwd(), pattern = ".csv")
cell.dat <- fread("Clustered_TAdemo.csv")
cell.dat
### Read in any metadata
setwd(InputDirectory)
setwd("metadata/")
list.files(path = getwd(), pattern = ".csv")
meta.dat <- fread("sample.details.csv")
meta.dat
### Choose columns to measure
as.matrix(names(cell.dat))
to.measure <- names(cell.dat)[c(2,4:6,8:9,11:13,16:19,21:30,32)]
to.measure
### Define some parameters
as.matrix(names(cell.dat))
sample.col <- "Sample"
group.col <- "Group"
batch.col <- "Batch"
pop.col <- "FlowSOM_metacluster"
### Define groups and statistical comparisons
as.matrix(unique(cell.dat[[group.col]]))
ctrl.grp <- "Mock"
grp.order <- c("Mock", "WNV")
grp.colours <- c("Black", "Red")
stat.comparisons <- list(c("Mock", "WNV")) # A list of comparisons for statistical test (used in graphing and stats)
var.test <- "kruskal.test" # can be "kruskal.test", "anova", or NULL
pair.test <- "wilcox.test" # can be "wilcox.test". "t.test", or NULL
### Define cell counts (if desired)
meta.dat
as.matrix(unique(cell.dat[[sample.col]]))
cell.counts <- as.vector(meta.dat[["Cells per sample"]])
cell.counts
##########################################################################################################
#### Plots to aid in summary data generation
##########################################################################################################
### Set positive cut offs for selected markers
as.matrix(names(cell.dat))
plot.dat <- do.subsample(cell.dat,
method = "per.sample",
samp.col = group.col,
targets = rep(5000, length(grp.order)))
plot.y <- "BV605.Ly6C"
to.plot <- c("BV711.SCA.1", "APC.BrdU")
setwd(OutputDirectory)
for(i in to.plot){
make.multi.plot(dat = plot.dat,
x.axis = i,
y.axis = plot.y,
col.axis = group.col,
type = "factor",
plot.by = group.col,
figure.title = paste0(i, " - split by group"))
}
### Define cutoffs
as.matrix(names(cell.dat))
markers.cutoff <- c("BV711.SCA.1", "APC.BrdU")
values.cutoff <- c(600, 400)
#########################################################################################################
#### Create summary data (per non-annotated cluster) and produce graphs and heatmaps
#########################################################################################################
### Write sumtables - proportions, cell counts, MFI
setwd(OutputDirectory)
write.sumtables(x = cell.dat,
sample.col = sample.col,
pop.col = pop.col,
measure.col = to.measure,
annot.col = c(group.col, batch.col),
group.col = group.col,
do.frequencies = TRUE,
cell.counts = cell.counts, # vector must be in order of the samples in which they appear (unique(cell.dat[[sample.col]]))
do.mfi.per.sample = FALSE,
do.mfi.per.marker = TRUE)
### Write sumtables for 'percent positive' only
setwd(OutputDirectory)
write.sumtables(x = cell.dat,
sample.col = sample.col,
pop.col = pop.col,
measure.col = to.measure,
annot.col = c(group.col, batch.col),
group.col = group.col,
do.frequencies = FALSE,
do.mfi.per.sample = FALSE,
do.mfi.per.marker = FALSE,
perc.pos.markers = markers.cutoff,
perc.pos.cutoff = values.cutoff)
#########################################################################################################
#### Produce graphs and heatmaps
#########################################################################################################
### List of sumtables
setwd(OutputDirectory)
sumtable.files <- list.files(getwd(), ".csv")
sumtable.files
### Select column names to plot from sumtable files
temp <- fread(sumtable.files[[1]])
as.matrix(names(temp))
plot.names <- names(temp)[c(6:20)]
plot.names <- as.character(plot.names)
### Pheatmap loop
setwd(OutputDirectory)
for(i in sumtable.files){
dat <- fread(i)
## Convert to fold
dat.fold <- do.convert.to.fold(x = dat,
sample.col = sample.col,
group.col = group.col,
ctrl.grp = ctrl.grp,
convert.cols = plot.names)
## Remove "Inf" or -Inf"
dat.fold[sapply(dat.fold, is.infinite)] <- NA
## Make Pheatmap
a <- gsub(".csv", "", i)
make.pheatmap(dat = dat.fold,
file.name = paste0(a, ".png"),
plot.title = a,
sample.col = sample.col,
annot.cols = group.col,
plot.cols = plot.names,
dendrograms = "none",
is.fold = TRUE)
}
### AutoGraph loops
setwd(OutputDirectory)
for(i in sumtable.files){
dat <- fread(i)
if(grepl('Cells per', dat[1,1], fixed = TRUE)){
scale <- "sci"
}
if(!grepl('Cells per', dat[1,1], fixed = TRUE)){
scale <- "lin"
}
for(a in plot.names){
make.autograph(x = dat,
x.axis = group.col,
grp.order = grp.order,
y.axis = a,
colour.by = group.col,
colours = grp.colours,
y.axis.label = dat[1,1],
my_comparisons = stat.comparisons,
Variance_test = var.test,
Pairwise_test = pair.test,
title = paste0(a),
scale = scale,
filename = paste0(dat[1,1], " - ", a, ".pdf"))
}
}
library(Spectre)
demo.clustered
as.matrix(names(demo.clustered))
names(demo.clustered)
library(devtools)
install_github("milescsmith/dim.reduction.wrappers")
library(dim.reduction.wrappers)
library(ReductionWrappers)
cell.dat <- demo.start
library(Spectre)
package.load()
cell.dat <- demo.start
library(Spectre)
package.load()
cell.dat <- as.data.table(demo.start)
cell.dat
cell.dat <- as.data.table(demo.umap)
cell.dat
make.colour.plot(cell.dat, "UMAP_42_X", "UMAP_42_Y", "BV605.Ly6C")
make.colour.plot(cell.dat, "UMAP_42_X", "UMAP_42_Y", "BV605.Ly6C", save.to.disk = FALSE)
names(cell.dat)
names(cell.dat)[40:41]
train.dat <- cell.dat[nms,]
train.dat <- cell.dat[,nms,]
train.dat <- cell.dat[,nms,with = FALSE]
train.dat
train.dat <- cell.dat[nms,]
nms,
nms
nms <- names(cell.dat)[40:41]
train.dat <- cell.dat[nms,]
train.dat <- cell.dat[,nms,]
train.dat
train.dat <- cell.dat[,nms,with=FALSE]
train.dat
names(cell.dat)
as.matrix(names(cell.dat))
nms <- names(cell.dat)[c(5:6,8:9,11,13,17:19,21:29,32)]
nms
train.dat <- cell.dat[,nms,with=FALSE]
train.dat
labels <- as.character(cell.dat$UMAP_42_X)
labels
train.knn.classifier(cell.dat, labels, min.num.neighbours = 1, max.num.neighbours = 1)
cell.dat
labels
knn.class <- train.knn.classifier(cell.dat, labels)
knn.class <- train.knn.classifier(train.dat, labels)
train.dat
str(train.dat)
labels
train.dat
knn.class <- train.knn.classifier(train.dat = train.dat, label = labels)
train.dat
labels
str(labels)
labels <- as.vector(labels)
labels
knn.class <- train.knn.classifier(train.dat = train.dat, label = labels)
as.matrix(names(cell.dat))
nms <- names(cell.dat)[c(5:6,8:9,11,13,17:19,21:29,32,40)]
nms
train.dat <- cell.dat[,nms,with=FALSE]
train.dat
knn.class <- train.knn.classifier(train.dat = train.dat, label = "UMAP_42_X")
train.dat
knn.class <- train.knn.classifier(train.dat = train.dat, label = as.character(train.dat$UMAP_42_X))
remove.packages("Spectre")
library(devtools)
install_github("sydneycytometry/spectre", "development")
library(Spectre)
library(Spectre)
package.check()
package.load()
package.check(type = "spatial")
package.load(type = "spatial")
dirname(rstudioapi::getActiveDocumentContext()$path)            # Finds the directory where this script is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))     # Sets the working directory to where the script is located
getwd()
start.dir <- getwd()
start.dir
## Set ROI directory
setwd("ROIs/")
roi.dir <- getwd()
## Set CP output directory
setwd(start.dir)
setwd("CPoutput/")
measure.dir <- getwd()
## Set panel directory
setwd(start.dir)
setwd("panel")
panel.dir <- getwd()
setwd(start.dir)
setwd(roi.dir)
rois <- list.dirs(roi.dir, full.names = FALSE, recursive = FALSE)
rois
setwd(measure.dir)
masks <- list.files(measure.dir, ".tiff")
masks
cell.dat <- fread("cell.csv")
image.dat <- fread("Image.csv")
setwd(panel.dir)
panel.dat <- fread("panel.csv")
setwd(start.dir)
spatial.dat <- read.spatial.files(## ROI tiffs
roi.loc = roi.dir,
rois = rois,
## Mask tiffs (from CP or Ilastik)
mask.loc = measure.dir,
masks = masks,
mask.ext = "_ilastik_s2_Probabilities_mask.tiff",
## CP outputs
cell.dat = cell.dat,
image.dat = image.dat,
panel.dat = panel.dat)
roi.dir
rois
spatial.dat <- read.spatial.files(## ROI tiffs
roi.loc = roi.dir,
rois = rois,
## Mask tiffs (from CP or Ilastik)
mask.loc = measure.dir,
masks = masks,
mask.ext = "_ilastik_s2_Probabilities_mask.tiff",
## CP outputs
cell.dat = cell.dat,
image.dat = image.dat, read.tiff.stacks = FALSE,
panel.dat = panel.dat)
